#!/bin/bash
set -e

while getopts a:f:p:c:u:p:t:e:b:n:x:h:i:g:s:y: option
do
 case "${option}"
 in
 	a) ACTION=${OPTARG};;
 	f) FORMAT=${OPTARG};;
 	x) PROJECTNAME=${OPTARG};;
	c) CONFIGRUATION=${OPTARG};;
	u) APPLEUSER=${OPTARG};;
	p) APPLEPASSWORD=${OPTARG};;
	t) TEAMID=${OPTARG};;
	e) CERTID=${OPTARG};;
	b) BUNDLEID=${OPTARG};;
	n) APPNAME=${OPTARG};;
	h) HOCKEYAPPID=${OPTARG};;
	i) HOCKEYTOKEN=${OPTARG};;
	g) GIT=${OPTARG};;
	s) SCHEME=${OPTARG};;
	y) SKYPECHAT=${OPTARG}
 esac
done
if [[ "$ACTION" = *"version"* ]]; then
	VERSIONNUM=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "`pwd`/$PROJECTNAME/Info.plist")
	NEWSUBVERSION=`echo $VERSIONNUM | awk -F "." '{print $3}'`
	NEWSUBVERSION=$(($NEWSUBVERSION + 1))
	NEWVERSIONSTRING=`echo $VERSIONNUM | awk -F "." '{print $1 "." $2 ".'$NEWSUBVERSION'" }'`
	FILES=$(find . -type f -name '*Info*.plist')
	for f in $FILES; do 
		if [[ "$f" = *"Pods"* ]]; then
			echo ""
		elif [[ "$f" = *"Support"* ]]; then
			echo ""
		else
			#echo $f
			/usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NEWVERSIONSTRING" "`pwd`/$f" || true
			if [ "$GIT" = "commit" ]; then
				git commit -m "Version: $NEWVERSIONSTRING" "$f" || true
			fi
		fi
	done
	if [ "$GIT" = "commit" ]; then
		git push
	fi
fi

if [[ "$ACTION" = *"set-bundle"* ]]; then
	/usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $BUNDLEID" "`pwd`/$PROJECTNAME/Info.plist"
fi
if [[ "$ACTION" = *"provision"* ]]; then
    echo "provisioning ..."
    echo "rvm use 2.3; ruby  `dirname $0`/getProfiles.rb $APPLEUSER $APPLEPASSWORD $TEAMID $CERTID $BUNDLEID '$APPNAME';rvm use system"
   	bash -lc "rvm use 2.3; ruby `dirname $0`/getProfiles.rb $APPLEUSER $APPLEPASSWORD $TEAMID $CERTID $BUNDLEID '$APPNAME';rvm use system"
    #install mobile provisioning profiles
    DIRECTORY=.
    for i in $DIRECTORY/*.mobileprovision; do
        # Process $i
        echo $i
        uuid=`grep UUID -A1 -a $i | grep -io "[-A-Z0-9]\{36\}"`
        cp "$i" ~/Library/MobileDevice/Provisioning\ Profiles/$uuid.mobileprovision
    done
    echo "provisioning complete"
fi

if [[ "$ACTION" = *"compile"* ]]; then
    echo "compiling ..."
    PROJECTEXTENSION="xcodeproj"
    if [ -e Podfile ]; then
		    echo "Cocoapods detected"
		    export LANG=en_US.UTF-8
				gem install cocoapods
				rm -rf Pods/
		    pod update
		    PROJECTEXTENSION="xcworkspace"
		fi
    if [ "$FORMAT" = "enterprise" ]; then
    	if [ -e "exportOptions.plist" ]; then
    		echo "options ok"
    	else
    		echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version=\"1.0\"> <dict> <key>method</key> <string>enterprise</string> <key>compileBitcode</key> <false/> <key>uploadBitcode</key> <false/> </dict> </plist>" >> "exportOptions.plist" 
    	fi
    	echo "ENTERPRISE"
    	source ~/.rvm/scripts/rvm
    	rvm use system
    	xcodebuild -quiet -configuration "$CONFIGRUATION" -workspace "$PROJECTNAME.$PROJECTEXTENSION" -scheme "$SCHEME" clean archive -archivePath "$PROJECTNAME.xcarchive"
    	xcrun xcodebuild -exportArchive -exportPath build/  -archivePath "$PROJECTNAME.xcarchive" -exportOptionsPlist exportOptions.plist -configuration Enterprise
			echo "compiling complete"
		else
			echo "no format specified"
		fi
		
fi

# DEPLOYMENTS
if [[ "$ACTION" = *"hockeyapp"* ]]; then
	curl -F "status=2" -F "notify=0" -F "ipa=@build/$SCHEME.ipa" -H "X-HockeyAppToken: $HOCKEYTOKEN"  "https://rink.hockeyapp.net/api/2/apps/$HOCKEYAPPID/app_versions/upload"
fi
if [[ "$ACTION" = *"skype"* ]]; then
	if [ -e "build/$SCHEME.ipa" ]; then
		VERSIONNUM2=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "`pwd`/$PROJECTNAME/Info.plist")
		curl -d "{\"body\":\"COMPLETED: build $APPNAME version $VERSIONNUM2\"}" -H "Content-Type: application/json" -X POST "https://www.localizationkit.com/bot/chat/$SKYPECHAT"
	else
		curl -d "{\"body\":\"FAILED: build $APPNAME\"}" -H "Content-Type: application/json" -X POST "https://www.localizationkit.com/bot/chat/$SKYPECHAT"
	fi
fi

echo $USER