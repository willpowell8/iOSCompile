#!/bin/bash
while getopts a:f:p:c:u:p:t:e:b:n:x:h:i: option
do
 case "${option}"
 in
 	a) ACTION=${OPTARG};;
 	f) FORMAT=${OPTARG};;
 	x) PROJECTNAME=${OPTARG};;
	c) CONFIGRUATION=${OPTARG};;
	u) APPLEUSER=${OPTARG};;
	p) APPLEPASSWORD=${OPTARG};;
	t) TEAMID=${OPTARG};;
	e) CERTID=${OPTARG};;
	b) BUNDLEID=${OPTARG};;
	n) APPNAME=${OPTARG};;
	h) HOCKEYAPPID=${OPTARG};;
	i) HOCKEYTOKEN=${OPTARG};;
 esac
done
echo $ACTION
if [[ "$ACTION" = *"version"* ]]; then
	VERSIONNUM=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "./$PROJECTNAME/Info.plist")
	NEWSUBVERSION=`echo $VERSIONNUM | awk -F "." '{print $3}'`
	NEWSUBVERSION=$(($NEWSUBVERSION + 1))
	NEWVERSIONSTRING=`echo $VERSIONNUM | awk -F "." '{print $1 "." $2 ".'$NEWSUBVERSION'" }'`
	echo "UPDATED VERSION $NEWVERSIONSTRING"
	FILES=$(find . -type f -name '*Info*.plist')
	for f in $FILES; do 
		if [[ "$f" = *"Pods"* ]]; then
			echo "POD"
		elif [[ "$f" = *"Support"* ]]; then
			echo "Support"
		else
			echo $f
			/usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NEWVERSIONSTRING" "$f"
		fi
	done
fi

if [[ "$ACTION" = *"set-bundle"* ]]; then
	/usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $BUNDLEID" "$PROJECTNAME/Info.plist"
fi
if [[ "$ACTION" = *"provision"* ]]; then
    echo "provisioning ..."
    echo "rvm use 2.3; ruby  `dirname $0`/getProfiles.rb $APPLEUSER $APPLEPASSWORD $TEAMID $CERTID $BUNDLEID '$APPNAME';rvm use system"
   	bash -lc "rvm use 2.3; ruby `dirname $0`/getProfiles.rb $APPLEUSER $APPLEPASSWORD $TEAMID $CERTID $BUNDLEID '$APPNAME';rvm use system"
    #install mobile provisioning profiles
    DIRECTORY=.
    for i in $DIRECTORY/*.mobileprovision; do
        # Process $i
        echo $i
        uuid=`grep UUID -A1 -a $i | grep -io "[-A-Z0-9]\{36\}"`
        cp "$i" ~/Library/MobileDevice/Provisioning\ Profiles/$uuid.mobileprovision
    done
    echo "provisioning complete"
fi

if [[ "$ACTION" = *"compile"* ]]; then
    echo "compiling ..."
    if [ -e Podfile ]; then
		    echo "Cocoapods detected"
		    export LANG=en_US.UTF-8
				gem install cocoapods
				rm -rf Pods/
		    pod update
		fi
    if [ "$FORMAT" = "enterprise" ]; then
    	echo "ENTERPRISE"
    	xcodebuild -configuration "$CONFIGRUATION" -workspace "$PROJECTNAME.xcworkspace" -scheme $PROJECTNAME clean archive -archivePath "$PROJECTNAME.xcarchive"
    	xcrun xcodebuild -exportArchive -exportPath build/  -archivePath "$PROJECTNAME.xcarchive" -exportOptionsPlist exportOptions.plist -configuration Enterprise
			echo "compiling complete"
		else
			echo "no format specified"
		fi
		
fi

# DEPLOYMENTS
if [[ "$ACTION" = *"hockeyapp"* ]]; then
	curl -F "status=2" -F "notify=0" -F "ipa=@build/$PROJECTNAME.ipa" -H "X-HockeyAppToken: $HOCKEYTOKEN"  "https://rink.hockeyapp.net/api/2/apps/$HOCKEYAPPID/app_versions/upload"
fi

echo $USER